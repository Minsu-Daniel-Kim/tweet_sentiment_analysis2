total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
total <- NULL
s <- rpois(1000, 3)
for (i in 1:2000) {
total <- c(total, mean(sample(s, 1000, replace = T)))
}
hist(total)
(104 ^ 2) / 30
30 * (1.296) ^ 2
30 * ((1.296) ^ 2)
(404 - 30 * (1.296) ^ 2) / 29
(404 - 30 * (1.296) ^ 2) / 29
(404 - (104 ^ 2/ 30))/ 29
1.2243 ^ 2
104 / 30
(404 - 30 * (3.466667) ^ 2) / 29
(404 - (104 ^ 2/ 30))/ 29
(5 / 36 ) / 1.96 ^ 2
(5 / 36 ) / (1.96 ^ 2)
a <- (2 * 1.96) / 0.05
a <- ((2 * 1.96) / 0.05) ^ 2
(5 / 36) / 30
b <- (5 / 36) / 30
a * b
b <- (5 / 36)
a * b
b <- (5 / 36) / 30
b
sqrt(a) * 1.96
sqrt(b) * 1.96
(5 / 36) / (0.05 / (2 * 1.96)) ^ 2
(5 / 36) / (0.05 / (2)) ^ 2
(0.25) / (0.05 / (2)) ^ 2
(1/4) / (0.05 / (2)) ^ 2
1.96 * (5 / (30 * 36)) / (0.05) ^ 2
(1.96 * (5 / (30 * 36))) / (0.05) ^ 2
((1.96 ^2) * (5 / (30 * 36))) / (0.05) ^ 2
(((1.96 ^2) * (5 / (30 * 36))) / (0.05) ^ 2) * 30
((5/ 36) * 1.96 ^ 2) / 0.05^2
((5/ 36) * 2 *1.96 ^ 2) / 0.05^2
((5/ 36) *1.96 ^ 2) / 0.05^2
s <- (5 / 36) * (270 / 300)
s
(s *1.96 ^ 2) / 0.05^2
sqrt(s)
sqrt(s) * 1.96
s
sqrt(s)
0.0657^2
s <- (5 / 36/30) * (270 / 300)
s
(s *1.96 ^ 2) / 0.05^2
s <- (5 / (36 * 30 ) * (270 / 300)
s <- (5 / (36 * 30 )) * (270 / 300)
s
s <- (5 / (36 * 30 )) * (270 / 300)
(s *1.96 ^ 2) / 0.05^2
sqrt(s) * 1.96
s <- (5 / (36 * 30 ))
sqrt(s) * 1.96
s <- (5 / (36 * 30 )) * (270 / 300)
sqrt(s) * 1.96
((1.96 ^2) * (5 / (29 * 36))) / (0.05) ^ 2
s <- (5 / (36 * 30 )) * (270 / 300)
sqrt(s) * 1.96
((1.96 ^2) * (5 / (30 * 36))) / (0.05) ^ 2
sqrt(s) * 1.96
nu <- (1500 / 36)
de <- ((0.05 / 3.92) * 300) + 1
nu / de
de <- ((0.05 / 3.92) ^ 2 * 300) + 1
nu / de
s
s
(0.15 * 0.85) / 0.02
(0.15 * 0.85) / 0.02 ^ 2
(0.03 * 0.97) / 0.01^2
(0.4 * 0.6 ) / 0.01^2
data <- c(104, 109, 111, 109, 87,
86, 80, 119, 88, 122,
91, 103, 99, 108, 96,
104, 98, 98, 83, 107,
79, 87, 94, 92, 97)
data
mean(data)
sd(data) ^ 2
data <- c(451, 162, 187, 112, 49, 21, 5, 11, 2)
sum(data * 0:9)
data * 0:9
data <- c(451, 162, 187, 112, 49, 21, 5, 11, 2, 0)
sum(data * 0:9)
sum(data * 0:9) / sum(data)
sum(data)
104 / 3-
104 / 30
104 / 30
a <- c(1,2,3)
a
a
suisides <- c(1867, 1789, 1944, 2094, 2097, 1981, 1887, 2024, 1928, 2032, 1978, 1859)
suisides <- c(1867, 1789, 1944, 2094, 2097, 1981, 1887, 2024, 1928, 2032, 1978, 1859)
months <- c(31, 28, 31, 30, 31, 30, 31,31, 30, 31, 30, 31)
sum(months)
months / sum(months)
(months / sum(months)) * sum(suisides)
suisides2 <- c(1668, 1407, 1370, 1309, 1341, 1338, 1406, 1446, 1332, 1363, 1410, 1526)
(months / sum(months)) * sum(suisides2)
lst <- list(a = c(1,2,3), b = c(3,4,5))
lst
for( i in lst) {
print(i)
}
for( i in lst) {
print(names(i))
print(i)
}
for( i in names(lst)) {
print(i)
}
for( i in names(lst)) {
print(i)
print(lst[[i]])
}
?ar
install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
library(h2o)
h2o.loadModel("submission/gbm/GBM_model_R_1461484874256_704")
h2o.init()
h2o.loadModel("submission/gbm/GBM_model_R_1461484874256_704")
h2o.loadModel("submission/gbm/GBM_model_R_1461484874256_704")
h2o.loadModel("submission/gbm/GLM_model_R_1461569016008_1")
h2o.loadModel("submission/gbm/GLM_model_R_1461569016008_1")
h2o.loadModel("submission/gbm/GLM_model_R_1461569016008_1")
h2o.loadModel("submission/gbm/GLM_model_R_1461569016008_1")
h2o.init()
h2o.loadModel("submission/gbm/GLM_model_R_1461569016008_1")
?h2o.init()
h2o.init(ip="ec2-52-38-144-131.us-west-2.compute.amazonaws.com")
h2o.removeAll()
h2o.init(ip="ec2-52-38-144-131.us-west-2.compute.amazonaws.com")
h2o.init(ip="52.38.144.131")
h2o.loadModel("submission/gbm/GLM_model_R_1461569016008_1")
h2o.loadModel("submission/gbm/GLM_model_R_1461569016008_1")
library(dplyr)
library(caret)
library(data.table)
data <- fread("~/Desktop/sentiment_data/full_x.csv", stringsAsFactors = F)
data_y <- fread("~/Desktop/sentiment_data/full_y.csv", nrows = 459721, stringsAsFactors = F)
length9data_y
length(data_y)
dim(data_y)
names(data_y) <- 'y'
data.y <- data_y
data.merged <- cbind(data, data.y)
data.test <- filter(data.merged, y == -1)
data.train <- filter(data.merged, y != -1)
saveRDS(data.train[1:300000, ], "cleanedData/train_300000.rds")
getwd()
setwd("~/Dropbox/sentiment/R")
saveRDS(data.train[1:300000, ], "cleanedData/train_300000.rds")
dim(data.train)
dim(data)
saveRDS(data.test, "cleanedData/test_2000_features.rds")
dim(data.test)
nrow(data.train)
saveRDS(data.train[300001:350000, ], "cleanedData/validation1.rds")
saveRDS(data.train[350001:nrow(data.train), ], "cleanedData/validation2.rds")
data.chunk <- readRDS("cleanedData/validation1.rds")
data_lst <- split_data(data.chunk)
source("code/utils.R")
source("code/model.R")
source("code/evaluation.R")
data_lst <- split_data(data.chunk)
source("code/model.R")
source("code/evaluation.R")
model.xgb <- get_xgboost(1)
model.xgboost.pred <- predict_xgboost(model.xgb, data_lst$test_x, version_layer_1, save = F)
model.xgboost.pred <- predict_xgboost(model.xgb, data_lst$test_x, version_layer_1, save = F)
version_layer_1 = paste0("layer1_", version)
model.xgboost.pred <- predict_xgboost(model.xgb, data_lst$test_x, version_layer_1, save = F)
model.xgboost.pred
dim(data_lst$test_y)
length(data_lst$test_y)
get_accuracy <- function(pred, obs, threshold=0.5) {
result <- ifelse((pred > threshold), 1, 0)
sum(result == obs) / length(obs)
}
get_accuracy(model.xgboost.pred, data_lst$test_x)
get_accuracy <- function(pred, obs, threshold=0.5) {
result <- ifelse((pred > threshold), 1, 0)
print(result)
sum(result == obs) / length(obs)
}
get_accuracy(model.xgboost.pred, data_lst$test_x)
get_accuracy(model.xgboost.pred, data_lst$test_y)
data.chunk <- readRDS("cleanedData/validation2.rds")
data_lst <- split_data(data.chunk)
data_lst <- split_data(data.chunk, validation = TRUE)
model.xgb <- get_xgboost(1)
model.xgboost.pred <- predict_xgboost(model.xgb, data_lst$test_x, version_layer_1, save = F)
get_accuracy(model.xgboost.pred, data_lst$test_y)
get_accuracy(model.xgboost.pred, data_lst$test_y, threshold = 0.52)
get_accuracy(model.xgboost.pred, data_lst$test_y, threshold = 0.53)
get_accuracy(model.xgboost.pred, data_lst$test_y, threshold = 0.51)
get_accuracy(model.xgboost.pred, data_lst$test_y, threshold = 0.5)
get_accuracy <- function(pred, obs, threshold=0.5) {
result <- ifelse((pred > threshold), 1, 0)
sum(result == obs) / length(obs)
}
data.chunk2 <- readRDS("cleanedData/validation2.rds")
data.chunk1 <- readRDS("cleanedData/validation1.rds")
data_lst1 <- split_data(data.chunk1, validation = TRUE)
data_lst2 <- split_data(data.chunk2, validation = TRUE)
model.xgboost.pred <- predict_xgboost(model.xgb, data_lst1$test_x, version_layer_1, save = F)
get_accuracy(model.xgboost.pred, data_lst1$test_y, threshold = 0.5)
model.xgboost.pred <- predict_xgboost(model.xgb, data_lst1$test_x, version_layer_1, save = F)
get_accuracy(model.xgboost.pred, data_lst1$test_y, threshold = 0.51)
get_accuracy(model.xgboost.pred, data_lst1$test_y, threshold = 0.52)
get_accuracy(model.xgboost.pred, data_lst1$test_y, threshold = 0.52)
get_accuracy(model.xgboost.pred, data_lst1$test_y, threshold = 0.522)
get_accuracy(model.xgboost.pred, data_lst1$test_y, threshold = 0.525)
get_accuracy(model.xgboost.pred, data_lst2$test_y, threshold = 0.5)
model.xgboost.pred <- predict_xgboost(model.xgb, data_lst2$test_x, version_layer_1, save = F)
get_accuracy(model.xgboost.pred, data_lst2$test_y, threshold = 0.5)
get_accuracy(model.xgboost.pred, data_lst2$test_y, threshold = 0.52)
get_accuracy(model.xgboost.pred, data_lst2$test_y, threshold = 0.524)
get_accuracy(model.xgboost.pred, data_lst2$test_y, threshold = 0.52)
get_accuracy <- function(pred, obs, threshold=0.5) {
result <- ifelse((pred > threshold), 1, 0)
print(sum(result == obs) / length(obs))
return(result)
}
a <- get_accuracy(model.xgboost.pred, data_lst1$test_y, threshold = 0.52)
model.xgboost.pred <- predict_xgboost(model.xgb, data_lst1$test_x, version_layer_1, save = F)
a <- get_accuracy(model.xgboost.pred, data_lst1$test_y, threshold = 0.52)
a
a <- get_accuracy(model.xgboost.pred, data_lst1$test_y, threshold = 0.52)
a
data.test <- readRDS("cleanedData/test_2000_features.rds")
model.xgboost.pred <- predict_xgboost(model.xgb, data.test, version_layer_1, save = F)
head(data.test)
data.test$y <- NULL
model.xgboost.pred <- predict_xgboost(model.xgb, data.test, version_layer_1, save = F)
class(data.test)
model.xgboost.pred <- predict_xgboost(model.xgb, as.matrix(data.test), version_layer_1, save = F)
get_submission <- function(pred, threshold=0.5) {
data.submission <- read.csv("rawData/SampleSubmission.csv")
data.submission$y <- NULL
result <- ifelse((pred > threshold), 1, 0)
result <- cbind(data.submission, result)
names(result) <- c("id", "y")
return(result)
}
a <- get_submission(model.xgboost.pred, 0.52)
a
dim(a)
paste0("submission/", now())
paste0("submission/", version)
get_submission <- function(pred, threshold=0.5, version) {
data.submission <- read.csv("rawData/SampleSubmission.csv")
data.submission$y <- NULL
result <- ifelse((pred > threshold), 1, 0)
result <- cbind(data.submission, result)
names(result) <- c("id", "y")
write.csv(paste0("submission/", version, ".csv"))
return(result)
}
a <- get_accuracy(model.xgboost.pred, data_lst1$test_y, threshold = 0.52)
a <- get_submission(model.xgboost.pred, 0.52)
a <- get_submission(model.xgboost.pred, 0.52, 7)
get_submission <- function(pred, threshold=0.5, version) {
data.submission <- read.csv("rawData/SampleSubmission.csv")
data.submission$y <- NULL
result <- ifelse((pred > threshold), 1, 0)
result <- cbind(data.submission, result)
names(result) <- c("id", "y")
write.csv(paste0("submission/", version, ".csv"))
return(result)
}
get_submission <- function(pred, threshold=0.5, version) {
data.submission <- read.csv("rawData/SampleSubmission.csv")
data.submission$y <- NULL
result <- ifelse((pred > threshold), 1, 0)
result <- cbind(data.submission, result)
names(result) <- c("id", "y")
write.csv(result, paste0("submission/", version, ".csv"), row.names = F)
return(result)
}
a <- get_submission(model.xgboost.pred, 0.52, 7)
get_submission <- function(pred, threshold=0.5, version) {
data.submission <- read.csv("rawData/SampleSubmission.csv")
data.submission$y <- NULL
result <- ifelse((pred > threshold), 1, 0)
result <- cbind(data.submission, result)
names(result) <- c("id", "y")
write.csv(result, paste0("submission/submission_", version, ".csv"), row.names = F)
return(result)
}
a <- get_submission(model.xgboost.pred, 0.52, 7)
a <- read.csv("submission/submission_7.csv")
View(a)
dim(a)
library(glmnet)
data.train <- readRDS("cleanedData/train_300000.rds")
dim(data.train)
data_lst <- split_data(data.train, validation =TRUE)
model.sparse.lr.cv <- cv.glmnet(x = data_lst$train_x, y = data_lst$train_y, alpha = 1, family = 'binomial')
model.sparse.lr <- glmnet(x = data_lst$train_x, y = data_lst$train_y, alpha = 1, family = 'binomial')
model.sparse.lr.cv
model.sparse.lr.pred <- predict(model.sparse.lr, data_lst$test_x , s = model.sparse.lr.cv$lambda.min, type = 'response')
model.sparse.lr.pred
a <- get_accuracy(model.sparse.lr.pred, data_lst$test_y)
a <- get_accuracy(model.sparse.lr.pred, data_lst$test_y, threshold = 0.52)
a <- get_accuracy(model.sparse.lr.pred, data_lst$test_y, threshold = 0.51)
a <- get_accuracy(model.sparse.lr.pred, data_lst$test_y, threshold = 0.5)
a <- get_accuracy(model.sparse.lr.pred, data_lst$test_y, threshold = 0.49)
a <- get_accuracy(model.sparse.lr.pred, data_lst$test_y, threshold = 0.5)
dim(data.train)
dim(data_lst$train_x)
model.sparse.lr.pred <- predict(model.sparse.lr, data_lst$test_x , s = model.sparse.lr.cv$lambda.min, type = 'response')
model.xgboost.pred <- predict_xgboost(model.xgb, data_lst$test_x, version_layer_1, save = F)
model.xgboost.pred
model.sparse.lr.pred
for (i in seq(0.3, 0.7, by=0.01)) {
print(i)
}
for (i in seq(0.3, 0.7, by=0.01)) {
result <- i * model.xgboost.pred + (1 - i) * model.sparse.lr.pred
get_accuracy(result, data_lst$test_y, threshold = 0.5)
}
for (i in seq(0.3, 0.9, by=0.01)) {
result <- i * model.xgboost.pred + (1 - i) * model.sparse.lr.pred
get_accuracy(result, data_lst$test_y, threshold = 0.5)
}
for (i in seq(0.3, 0.9, by=0.01)) {
result <- i * model.xgboost.pred + (1 - i) * model.sparse.lr.pred
for (j in seq(0.5, 0.6, by=0.01)) {
get_accuracy(result, data_lst$test_y, threshold = j)
}
}
get_accuracy(model.xgboost.pred, data_lst$test_y)
get_accuracy(model.xgboost.pred, data_lst$test_y)
get_accuracy <- function(pred, obs, threshold=0.5) {
result <- ifelse((pred > threshold), 1, 0)
sum(result == obs) / length(obs)
}
get_accuracy(model.xgboost.pred, data_lst$test_y)
model.xgb <- readRDS("model/xgboost_1/xgboost_1.rds")
model.xgboost.pred <- predict_xgboost(model.xgb, data_lst$test_x, version_layer_1, save = F)
get_accuracy(model.xgboost.pred, data_lst$test_y)
get_accuracy(model.xgboost.pred, data_lst$test_y, 0.52)
get_accuracy(model.xgboost.pred, data_lst$test_y, 0.53)
get_accuracy(model.xgboost.pred, data_lst$test_y, 0.51)
get_accuracy(model.xgboost.pred, data_lst$test_y, 0.52)
c <- NULL
for (i in seq(0.3, 0.9, by=0.01)) {
result <- i * model.xgboost.pred + (1 - i) * model.sparse.lr.pred
for (j in seq(0.5, 0.6, by=0.01)) {
c <- c(c, get_accuracy(result, data_lst$test_y, threshold = j))
}
}
max(c)
get_accuracy(model.xgboost.pred, data_lst$test_y, 0.52)
c <- NULL
for (i in seq(0.3, 0.9, by=0.01)) {
c <- c(c, get_accuracy(model.xgboost.pred, data_lst$test_y, 0.52))
}
max(c)
c <- NULL
for (i in seq(0.3, 0.9, by=0.005)) {
result <- i * model.xgboost.pred + (1 - i) * model.sparse.lr.pred
for (j in seq(0.5, 0.6, by=0.005)) {
c <- c(c, get_accuracy(result, data_lst$test_y, threshold = j))
}
}
max(c)
length(seq(0.4, 0.9, by =0.005))
101 * 101
length(seq(0.4, 0.9, by =0.01))
51 * 51
c <- matrix(nrow = 2601, ncol = 3)
i = 1
for (i in seq(0.4, 0.9, by=0.01)) {
result <- i * model.xgboost.pred + (1 - i) * model.sparse.lr.pred
for (j in seq(0.4, 0.6, by=0.01)) {
c[i, ] <- c(i, j, get_accuracy(result, data_lst$test_y, threshold = j)))
i <- i + 1
}
}
c <- matrix(nrow = 2601, ncol = 3)
i = 1
for (i in seq(0.4, 0.9, by=0.01)) {
result <- i * model.xgboost.pred + (1 - i) * model.sparse.lr.pred
for (j in seq(0.4, 0.6, by=0.01)) {
c[i, ] <- c(i, j, get_accuracy(result, data_lst$test_y, threshold = j))
i <- i + 1
}
}
which.max(c[,3])
c[12, ]
z = 1
for (i in seq(0.4, 0.9, by=0.01)) {
result <- i * model.xgboost.pred + (1 - i) * model.sparse.lr.pred
for (j in seq(0.4, 0.6, by=0.01)) {
c[z, ] <- c(i, j, get_accuracy(result, data_lst$test_y, threshold = j))
z <- z + 1
}
}
idx <- which.max(c[,3])
c[idx, ]
model.xgboost.pred <- predict_xgboost(model.xgb, data_lst1$test_x, version_layer_1, save = F)
model.sparse.lr.pred <- predict(model.sparse.lr, data_lst1$test_x , s = model.sparse.lr.cv$lambda.min, type = 'response')
get_accuracy(model.xgboost.pred * 0.81 + model.sparse.lr.pred * 0.19, data_lst1$test_y, threshold = 0.52)
get_accuracy(model.xgboost.pred, data_lst1$test_y, threshold = 0.52)
model.xgboost.pred <- predict_xgboost(model.xgb, rbind(data_lst1$test_x, data_lst1$train_x), version_layer_1, save = F)
model.sparse.lr.pred <- predict(model.sparse.lr, rbind(data_lst1$test_x, data_lst1$train_x) , s = model.sparse.lr.cv$lambda.min, type = 'response')
get_accuracy(model.xgboost.pred * 0.81 + model.sparse.lr.pred * 0.19, rbind(data_lst1$test_y, data_lst1$train_y), threshold = 0.52)
rbind(data_lst1$test_y, data_lst1$train_y)
rbind(data_lst1$test_y, data_lst1$train_y)
c(data_lst1$test_y, data_lst1$train_y)
get_accuracy(model.xgboost.pred * 0.81 + model.sparse.lr.pred * 0.19, c(data_lst1$test_y, data_lst1$train_y), threshold = 0.52)
get_accuracy(model.xgboost.pred, c(data_lst1$test_y, data_lst1$train_y), threshold = 0.52)
ens <- readRDS("pred/ensemble_layer1_1/ensemble_pred_layer1_1.rds")
ens
dim9ens
dim(ens)
saveRDS(model.sparse.lr.cv, "model/sparse_logit/sparse_cv.rds")
saveRDS(model.sparse.lr.cv, "model/sparse_logit/sparse_cv.rds")
saveRDS(model.sparse.lr, "model/sparse_logit/sparse_logit.rds")
